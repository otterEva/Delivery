 Общее описание архитектуры

Приложение будет состоять из нескольких уровней:

1. Контроллеры (Controllers): Отвечают за приём входящих HTTP-запросов, их валидацию и отправку ответа. Основной контроллер будет обрабатывать запросы логистики (маршрутизации), используя сервисный слой.

2. Сервисы (Services): В данном слое будет основная бизнес-логика приложения. Сервис расчёта маршрута:
   - Получает данные о точках доставки, складах, товарах, стартовой точке и емкости курьера.
   - Учитывает временные интервалы (задача со звёздочкой).
   - Рассчитывает оптимальный маршрут.
   - Обращается к внешним API карт для расчёта расстояний и оптимального пути (опционально, можно эмулировать).

3. Репозитории (Repositories): Отвечают за доступ к данным. В задаче реализуем In-Memory-Storage для хранения тестовых данных. В реальных условиях мог бы быть доступ к БД, кэшу и т.п.

4. Модели (Entities, DTOs):
   - Модели предметной области: `Product`, `Warehouse`, `DeliveryPoint`, `Courier`, `OrderItem`, `RouteStep` и т.д.
   - DTO/модели запросов и ответов (для сериализации в JSON).

5. Интеграции с внешними сервисами (например, API карт):
   - Интерфейс или адаптер, который обращается к внешнему сервису для расчёта расстояний и получения геоданных.

6. Отказоустойчивость:
   - Предусмотреть использование очередей, кэширование ответов, возможно, горизонтальное масштабирование.
   - На учебном примере можно упустить детали, но упомянуть их в архитектуре.

 Примерная структура каталогов


project/
    app.py (точка входа, запуск приложения)
    controllers/
        route_controller.py
    services/
        route_service.py
        routing_algorithm.py
    repositories/
        in_memory_repository.py
    models/
        __init__.py
        courier.py
        product.py
        warehouse.py
        delivery_point.py
        order_item.py
        request_dto.py
        response_dto.py
    integrations/
        maps_api_client.py
    utils/
        time_window_utils.py
        capacity_calculator.py
    config.py
    openapi.yaml


 Краткое описание классов

- controllers/route_controller.py:
  - Класс `RouteController`:
    - Метод `post("/route")` принимает JSON-запрос, валидирует и передаёт в `RouteService`.
    - Возвращает рассчитанный маршрут и ссылку на карту.

- services/route_service.py:
  - Класс `RouteService`:
    - Метод `calculate_route(request_dto)`:
      - Обращается к репозиториям для получения данных о товарах, складах.
      - Использует `routing_algorithm` для расчёта оптимального маршрута.
      - Учитывает временные интервалы, емкость курьера, задержки.
      - Формирует итоговый `ResponseDTO`.

- services/routing_algorithm.py:
  - Класс `RoutingAlgorithm` или набор функций:
    - Логика расчёта маршрута (может быть сложной: динамическое программирование, эвристики, вызовы к внешним API карт).
    - Учет скорости 60 км/ч, времени выдачи заказа (10 мин.), времени загрузки на складе (1 мин/товар), временных окон.

- repositories/in_memory_repository.py:
  - Класс `InMemoryRepository`:
    - Хранит данные о продуктах, складах, доставках в памяти.
    - Методы: `get_products()`, `get_warehouses()`, `get_delivery_points()` и т.п.

- models/courier.py:
  - Класс `Courier`:
    - Поля: `id`, `capacity` (в юнитах), `start_coordinate`, `start_time`.
    - Возможно, `current_load`.

- models/product.py:
  - Класс `Product`:
    - Поля: `guid`, `size_in_units`.

- models/delivery_point.py:
  - Класс `DeliveryPoint`:
    - Поля: `id`, `coordinate`, `items = List[OrderItem]`, `time_window_start`, `time_window_end`.
    - `OrderItem` содержит `product_guid` и `quantity`.

- models/warehouse.py:
  - Класс `Warehouse`:
    - Поля: `id`, `coordinate`, `available_products = dict{product_guid: quantity}`.

- models/order_item.py:
  - Класс `OrderItem`:
    - Поля: `product_guid`, `quantity`.

- models/request_dto.py: (DTO для входного JSON)
  - Класс `RouteRequestDTO`:
    - Поля:
      - `courier_start_coordinate`
      - `courier_start_time` (время выезда)
      - `courier_capacity`
      - `delivery_points` (список точек с координатами, временными интервалами и товарами)
      - `warehouses` (список складов с координатами и товарами)
      - `products` (список всех товаров с их размерами)

- models/response_dto.py: (DTO для выходного JSON)
  - Класс `RouteResponseDTO`:
    - Поля:
      - `route_steps` (список точек в порядке посещения: склады, доставки, возвращение)
      - `map_url` (ссылка на маршрут)

- integrations/maps_api_client.py:
  - Класс `MapsApiClient`:
    - Методы `get_distance(coord1, coord2)` и т.д.

 Пример входного JSON (Запрос)

json
{
  "courier_start_coordinate": {"lat": 55.7558, "lon": 37.6173},
  "courier_start_time": "2024-12-08T09:00:00Z",
  "courier_capacity": 100,
  "products": [
    {
      "guid": "prod-123",
      "size_in_units": 10
    },
    {
      "guid": "prod-456",
      "size_in_units": 5
    }
  ],
  "warehouses": [
    {
      "id": "wh-1",
      "coordinate": {"lat": 55.7600, "lon": 37.6200},
      "available_products": {
        "prod-123": 10,
        "prod-456": 20
      }
    }
  ],
  "delivery_points": [
    {
      "id": "dp-1",
      "coordinate": {"lat": 55.7700, "lon": 37.6250},
      "items": [
        {
          "product_guid": "prod-123",
          "quantity": 2
        },
        {
          "product_guid": "prod-456",
          "quantity": 5
        }
      ],
      "time_window_start": "2024-12-08T10:00:00Z",
      "time_window_end": "2024-12-08T12:00:00Z"
    },
    {
      "id": "dp-2",
      "coordinate": {"lat": 55.7800, "lon": 37.6300},
      "items": [
        {
          "product_guid": "prod-123",
          "quantity": 3
        }
      ],
      "time_window_start": "2024-12-08T09:30:00Z",
      "time_window_end": "2024-12-08T11:00:00Z"
    }
  ]
}


 Пример ответа (Результат)

json
{
  "route_steps": [
    {
      "type": "warehouse",
      "id": "wh-1",
      "coordinate": {"lat": 55.7600, "lon": 37.6200},
      "actions": [
        {
          "action": "load",
          "product_guid": "prod-123",
          "quantity": 2,
          "time_taken": "2 minutes" 
        },
        {
          "action": "load",
          "product_guid": "prod-456",
          "quantity": 5,
          "time_taken": "5 minutes"
        }
      ]
    },
    {
      "type": "delivery_point",
      "id": "dp-2",
      "coordinate": {"lat": 55.7800, "lon": 37.6300},
      "arrival_time": "2024-12-08T09:50:00Z",
      "order_processing_time": "10 minutes",
      "delivered_items": [
        {
          "product_guid": "prod-123",
          "quantity": 3
        }
      ]
    },
    {
      "type": "warehouse",
      "id": "wh-1",
      "coordinate": {"lat": 55.7600, "lon": 37.6200},
      "actions": [
        {
          "action": "load",
          "product_guid": "prod-456",
          "quantity": 5,
          "time_taken": "5 minutes"
        }
      ]
    },
    {
      "type": "delivery_point",
      "id": "dp-1",
      "coordinate": {"lat": 55.7700, "lon": 37.6250},
      "arrival_time": "2024-12-08T11:10:00Z",
      "order_processing_time": "10 minutes",
      "delivered_items": [
        {
          "product_guid": "prod-123",
          "quantity": 2
        },
        {
          "product_guid": "prod-456",
          "quantity": 5
        }
      ]
    },
    {
      "type": "return_to_start",
      "coordinate": {"lat": 55.7558, "lon": 37.6173},
      "arrival_time": "2024-12-08T12:30:00Z"
    }
  ],
  "map_url": "https://maps.example.com/route?points=..."
}


В данном ответе показан концептуальный маршрут:
- Курьер выехал со стартовой точки.
- Сначала посетил склад, загрузил необходимые товары.
- Доставил часть заказа в первую точку доставки, учитывая окно времени.
- Вернулся на склад для догрузки.
- Доставил во вторую точку доставки.
- Вернулся в точку старта.

Учтено время на загрузку (1 мин/товар), время доставки (10 мин.), перемещение со скоростью 60 км/ч (расчёты расстояний опущены для примера), а также временные окна.

Это примерная архитектура и пример запросов/ответов. В реальном коде потребуется реализовать бизнес-логику, методы вызова внешних API карт, а также корректные расчёты времен и маршрутов.
